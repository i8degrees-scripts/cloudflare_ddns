#!/usr/bin/env bash

#set -e

if [ "$EUID" -ne 0 ]; then
  echo "Please run as root"
  exit 1
fi

#take config as parameter
source $1

# NOTE(JEFF): Setup the log file parameter when set to an non-empty value
if [ "$logfile" != "" ]; then
  dir_path=$(dirname "$logfile")
  log_path=$(basename "$logfile")
  abs_path="${dir_path}/${log_path}"

  if ! mkdir -pv "$dir_path"; then
    echo "CRITICAL: Failed to create directory path at ${dir_path}..."
    echo
    exit 2 # ENOENT
  fi

  if ! touch "$abs_path"; then
    echo "CRITICAL: Failed to create log file at ${abs_path}..."
    echo
    exit 2 # ENOENT
  fi
fi

# Verify Cloudflare API token
#
#[int] verify_token(token = [required string])
# ...where the return of zero (0) is successful
verify_token() {
  token="$1"
  result=255 # undefined

  #jq -r '{"result"}[] | .[0] | .status'
  token_result=$(curl -4 -s \
    "https://api.cloudflare.com/client/v4/user/tokens/verify" \
    -H "Content-Type: application/json" \
    -H "Authorization: Bearer $token" | \
    jq -r .result.status
  )

  if [ "$token_result" = "active" ]; then
    result=0
  fi

  return "$result"
}

check_records() {

  for zone_name in $(echo $domains | jq -r 'keys|.[]'); do
    echo "Dom√§n $zone_name"

    zone_id=$(curl -4 -s \
      -X GET "https://api.cloudflare.com/client/v4/zones?name=$zone_name&status=active" \
      -H "Content-Type: application/json" \
      -H "X-Auth-Email: $email" \
      -H "Authorization: Bearer $api_token" |
      jq -r '{"result"}[] | .[0] | .id')

    for sub in $(echo $domains | jq -r ".[\"${zone_name}\"]|.[]"); do
      if [[ $sub == "@" ]]; then
        dns_record=$zone_name
      else
        dns_record="$sub.$zone_name"
      fi

      record_data=$(curl -s \
        -X GET "https://api.cloudflare.com/client/v4/zones/$zone_id/dns_records?type=$2&name=$dns_record" \
        -H "Content-Type: application/json" \
        -H "X-Auth-Email: $email" \
        -H "Authorization: Bearer $api_token")

      record_id=$(jq -r '{"result"}[] | .[0] | .id' <<<$record_data)
      cf_ip=$(jq -r '{"result"}[] | .[0] | .content' <<<$record_data)

      echo "$dns_record cf_ip: $cf_ip"

      if [[ $cf_ip != $1 ]]; then
        result=$(curl -s \
          -X PUT "https://api.cloudflare.com/client/v4/zones/$zone_id/dns_records/$record_id" \
          -H "Content-Type: application/json" \
          -H "X-Auth-Email: $email" \
          -H "Authorization: Bearer $api_token" \
          --data "{\"type\":\"$2\",\"name\":\"$dns_record\",\"content\":\"$1\",\"ttl\":1,\"proxied\":false}" |
          jq .success)
        if [[ $result == "true" ]]; then
          echo "$dns_record updated to: $1"
          echo "$(date -Iminutes) $2: $dns_record updated to: $1" >>$logfile
        else
          echo "IPV4: $dns_record update failed"
          echo "$(date -Iminutes) $2: $dns_record update failed" >>$logfile
        fi
      else
        echo "$dns_record already up do date"
        #echo "$(date -Iminutes) $2: $dns_record already up do date" >> $logfile
      fi
    done
  done

}

token_result=$(verify_token "$api_token")
echo "token: $token_result"

if [ "$token_result" = 0 ]; then
  echo "INFO: Successful validation of the given API token at ${1}."
  echo
else
  echo "CRITICAL: Failed to verify the given API token..."
  echo "DEBUG: Please double check your API token specified in ${1}."
  echo
  exit 255 # undefined
fi

for ipv4_command in "${ipv4_command[@]}"; do
  if ext_ip=$($ipv4_command); then
    echo "Found IPV4: $ext_ip"
    check_records $ext_ip 'A'
    break;
  else
    echo "CRITICAL: Failed to obtain your public ipv4 address..."
    echo
    echo "DEBUG: Please double check the URL set in ipv4_command at ${1}."
    echo "DEBUG: The URL that halted this script is ${ipv4_command}."
    echo
    exit 5 # ENOIO
  fi
done

for ipv6_command in "${ipv6_command[@]}"; do
  if ext_ip=$($ipv6_command); then
    echo "Found IPV6: $ext_ip"
    check_records $ext_ip 'AAAA'
    break;
  else
    echo "CRITICAL: Failed to obtain your public ipv6 address..."
    echo
    echo "DEBUG: Please double check the URL set in ipv6_command at ${1}."
    echo "DEBUG: The URL that halted this script is ${ipv6_command}."
    echo
    exit 5 # ENOIO
  fi
done

